{
  "name": "steam-webapi",
  "version": "0.6.4",
  "description": "Steam WebAPI wrapper",
  "keywords": [
    "steam",
    "tf2",
    "team fortress 2",
    "dota2",
    "csgo",
    "portal 2"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/jonbo/node-steam-webapi"
  },
  "dependencies": {
    "qs": "~1.2.2"
  },
  "devDependencies": {
    "mocha": "~1.21.4",
    "should": "~4.0.4"
  },
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "readme": "Steam WebAPI library for node.js\r\n==========================\r\n*Supports Node v0.8.26 (or newer) but might work on older versions*\r\n\r\nA [Steam API Key](http://steamcommunity.com/dev/apikey) is needed for many of the methods in the API and is a requirement for this library.\r\n\r\nAll the methods are created at runtime (available after Steam.ready, which retrieves the API methods), rather than compile-time, so this should theoretically support all (existing and future) Steam API methods.\r\nNo need to worry about calling the correct API version, as it will always be the latest. If you must use a different version simply pass in a {'version': x} option into a method.\r\n\r\n\r\n[List of methods](https://github.com/jonbo/node-steam-webapi/blob/master/api_method_list.md)\r\n\r\nTo install:\r\n\r\n    npm install steam-webapi\r\n\r\n## Example\r\n\r\n```js\r\nvar Steam = require('steam-webapi');\r\n\r\n// Set global Steam API Key\r\nSteam.key = \"YOUR API KEY\";\r\n\r\nSteam.ready(function(err) {\r\n    if (err) return console.log(err);\r\n\r\n    var steam = new Steam();\r\n\r\n    // Retrieve the steam ID from a steam username/communityID\r\n    steam.resolveVanityURL({vanityurl:'jonbo'}, function(err, data) {\r\n        console.log(data);\r\n        // data -> { steamid: '76561197968620915', success: 1 }\r\n\r\n        // Get the Player's TF2 Backpack items\r\n        data.gameid = Steam.TF2;\r\n\r\n        // getPlayerItems requires { gameid, steamid }\r\n        steam.getPlayerItems(data, function (err, data) {\r\n            console.log(data);\r\n            // data -> { status: 1, num_backpack_slots: 1100, items: [...], ...}\r\n\r\n        });\r\n    });\r\n\r\n});\r\n```\r\n\r\n## Example with generators and promises\r\n\r\n```js\r\n// Requires node 0.11+ and \"node --harmony\"\r\n\r\nvar Steam = require('steam-webapi');\r\nvar Promise = require('bluebird');\r\n\r\n// Set global Steam API Key\r\nSteam.key = \"YOUR API KEY\";\r\n\r\nSteam.ready(Promise.coroutine(function*(err) {\r\n    if (err) return console.log(err);\r\n\r\n    // Creates an promise wielding function for every method (with Async attached at the end)\r\n    Promise.promisifyAll(Steam.prototype);\r\n\r\n    var steam = new Steam();\r\n\r\n    // Retrieve the steam ID from a steam username/communityID\r\n    var data = yield steam.resolveVanityURLAsync({vanityurl:'jonbo'});\r\n    console.log(data);\r\n    // data -> { steamid: '76561197968620915', success: 1 }\r\n\r\n    // Get the Player's TF2 Backpack items\r\n    data.gameid = Steam.TF2;\r\n    data = yield steam.getPlayerItemsAsync(data);\r\n    console.log(data);\r\n    // data -> { status: 1, num_backpack_slots: 1100, items: [...], ...}\r\n\r\n}));\r\n```\r\n\r\n\r\nIf you plan on only using this for TF2 data only (or just want to default to it), the first example can be rewritten.\r\n\r\n```js\r\nvar steam = new Steam({gameid: Steam.TF2, appid:Steam.TF2});\r\n\r\nsteam.resolveVanityURL({vanityurl:'jonbo'}, function(err, data) {\r\n\r\n    // No need for data.gameid = Steam.TF2; here\r\n\r\n    steam.getPlayerItems(data, function (err, data) {\r\n        console.log(data);\r\n        // data -> { status: 1, num_backpack_slots: 1100, items: [...], ...}\r\n    });\r\n});\r\n```\r\n\r\nIt works the same for 'key' and other fields.\r\n\r\n# Tests\r\n```\r\n$ make test\r\n```\r\n\r\n# License\r\n\r\n  MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jonbo/node-steam-webapi/issues"
  },
  "homepage": "https://github.com/jonbo/node-steam-webapi",
  "_id": "steam-webapi@0.6.4",
  "_shasum": "e3515b2b6420ebec5b19e112f6fd82049a5370e0",
  "_from": "steam-webapi@",
  "_resolved": "https://registry.npmjs.org/steam-webapi/-/steam-webapi-0.6.4.tgz"
}
